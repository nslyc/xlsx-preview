{"version":3,"file":"xlsxPreview.cjs.js","mappings":"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","sources":["webpack://xlsx-preview/webpack/bootstrap","webpack://xlsx-preview/webpack/runtime/define property getters","webpack://xlsx-preview/webpack/runtime/hasOwnProperty shorthand","webpack://xlsx-preview/webpack/runtime/make namespace object","webpack://xlsx-preview/external commonjs \"ExcelJS\"","webpack://xlsx-preview/./src/utils.ts","webpack://xlsx-preview/./src/constants/base.ts","webpack://xlsx-preview/./src/htmls/genHtmlStructure.ts","webpack://xlsx-preview/./src/images/genImages.ts","webpack://xlsx-preview/./src/CSSStyles/inline.ts","webpack://xlsx-preview/./src/htmls/genCell.ts","webpack://xlsx-preview/./src/htmls/genText.ts","webpack://xlsx-preview/./src/htmls/genSheet.ts","webpack://xlsx-preview/./src/CSSStyles/base.ts","webpack://xlsx-preview/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"ExcelJS\");","export function parseARGB(argb: string) {\r\n  if (argb.length !== 8) throw \"This is not a standard argb string.\";\r\n  const color: string[] = [];\r\n  for (let i = 0; i < 4; i++) {\r\n    color.push(argb.substr(i * 2, 2));\r\n  }\r\n  const [a, r, g, b] = color.map((v) => parseInt(v, 16));\r\n  return { a, r, g, b };\r\n}\r\n\r\nfunction toAndJoinHex(range: Uint8Array): string {\r\n  let result: string = \"\";\r\n  for (const v of range) {\r\n    let to16 = v.toString(16);\r\n    while (to16.length < 2) {\r\n      to16 = \"0\" + to16;\r\n    }\r\n    result += to16;\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function uuid() {\r\n  const view = crypto.getRandomValues(new Uint8Array(8));\r\n  const front = view.slice(0, 4);\r\n  const end = view.slice(4);\r\n  const fontPart = toAndJoinHex(front);\r\n  const endPart = toAndJoinHex(end);\r\n  return `${fontPart}-${endPart}`;\r\n}\r\n","import { uuid } from \"../utils\";\r\n\r\nexport const UUID = uuid();\r\n\r\nexport const EXCEL_SHEETS_CLS = `excel-sheets-${UUID}`;\r\n\r\nexport const TABLE_CLS = `table-${UUID}`;\r\nexport const TBODY_CLS = `tbody-${UUID}`;\r\nexport const SHEET_CLS = `sheet-${UUID}`;\r\nexport const SHEET_BTN_CLS = `sheet-btn-${UUID}`;\r\nexport const TOGGLE_SHEET_BTN_X = `btns-x-${UUID}`;\r\n\r\nexport const CELL_HEIGHT = 24;\r\nexport const CELL_WIDTH = 72;\r\nexport const TABLE_BORDER_COLOR = \"#f0f0f0\";\r\nexport const ORDER_CELL_BACKGROUND = \"#b6d9fb\";\r\n\r\nexport const FIRST_ORDER_ROW_HEIGHT = 24;\r\nexport const FIRST_ORDER_COL_WIDTH = 32;\r\n\r\nconst DEFAULT_NUMBER_ROWS = 20;\r\nconst DEFAULT_NUMBER_COLS = 16;\r\nexport let MINIMUM_NUMBER_ROWS = DEFAULT_NUMBER_ROWS;\r\nexport let MINIMUM_NUMBER_COLS = DEFAULT_NUMBER_COLS;\r\n\r\nexport function setMinimumNumberRows(count: number) {\r\n  if (count < DEFAULT_NUMBER_ROWS) {\r\n    console.warn(\"setMinimumNumberRows: count less then DEFAULT_NUMBER_ROWS.\");\r\n  }\r\n  MINIMUM_NUMBER_ROWS = count;\r\n}\r\n\r\nexport function setMinimumNumberCols(count: number) {\r\n  if (count < DEFAULT_NUMBER_COLS) {\r\n    console.warn(\"setMinimumNumberCols: count less then DEFAULT_NUMBER_COLS.\");\r\n  }\r\n  MINIMUM_NUMBER_COLS = count;\r\n}\r\n","import { Worksheet } from \"exceljs\";\r\nimport {\r\n  SHEET_BTN_CLS,\r\n  TOGGLE_SHEET_BTN_X,\r\n  SHEET_CLS,\r\n  TABLE_CLS,\r\n  TBODY_CLS,\r\n  UUID,\r\n  EXCEL_SHEETS_CLS,\r\n} from \"../constants/base\";\r\nimport { genToggleSheetCSS } from \"../CSSStyles/base\";\r\n\r\nconst EMPTY_ROW_CACHE: { [key: number]: string } = {};\r\nexport function genEmptyRow(columns: number, orderCell: string): string {\r\n  if (EMPTY_ROW_CACHE[columns])\r\n    return `<tr>${orderCell}${EMPTY_ROW_CACHE[columns]}</tr>`;\r\n  let cells = \"\";\r\n  for (let i = 1; i <= columns; i++) {\r\n    cells += `<td></td>`;\r\n  }\r\n  EMPTY_ROW_CACHE[columns] = cells;\r\n  return `<tr>${orderCell}${cells}</tr>`;\r\n}\r\n\r\nexport function wrapTable(html: string): string {\r\n  return `<body class=\"embed-body-${UUID}\">\r\n        <table class=\"${TABLE_CLS}\">\r\n            <tbody class=\"${TBODY_CLS}\">${html}</tbody>\r\n        </table>\r\n    </body>`;\r\n}\r\n\r\nexport function sheetsInAll(sheets: string[], workSheet: Worksheet[]) {\r\n  let html = \"\";\r\n  let buttons = \"\";\r\n  for (let i = 0; i < sheets.length; i++) {\r\n    const MIME_TYPE = \"text/html\";\r\n    const url = URL.createObjectURL(new Blob([sheets[i]], { type: MIME_TYPE }));\r\n    const active = i === 0 ? \" active\" : \"\";\r\n    html += `<object class=\"${SHEET_CLS}${active}\" data-index=\"${i}\" type=\"${MIME_TYPE}\" data=\"${url}\"></object>`;\r\n    buttons += `<button class=\"${SHEET_BTN_CLS}${active}\" data-index=\"${i}\">${workSheet[i].name}</button>`;\r\n  }\r\n  html += `<div class=\"${TOGGLE_SHEET_BTN_X}\">${buttons}</div>`;\r\n  html += `${genToggleSheetCSS()}${genScripts()}`;\r\n  return `<div class=\"${EXCEL_SHEETS_CLS}\">${html}</div>`;\r\n}\r\n\r\nfunction genScripts() {\r\n  return `<script>\r\n    window.onload = function() {\r\n      const buttonBox = document.querySelector('.${TOGGLE_SHEET_BTN_X}');\r\n      buttonBox.addEventListener('click', e => {\r\n        const target = e.target;\r\n        if (target.classList.contains('${SHEET_BTN_CLS}')) {\r\n          const sheets = document.querySelectorAll('.${SHEET_CLS}');\r\n          for (let node of sheets) {\r\n            node.classList.remove('active');\r\n          }\r\n          for (let btn of buttonBox.children) {\r\n            btn.classList.remove('active');\r\n          }\r\n          const index = target.dataset.index;\r\n          document.querySelector('.${SHEET_CLS}[data-index=\"'+index+'\"]').classList.add('active');\r\n          e.target.classList.add('active');\r\n        }\r\n      })\r\n    }\r\n  </script>`;\r\n}\r\n","import { ImageRange, Worksheet } from \"exceljs\";\r\nimport { ImagePosAndSize, RowsAndColsSpanMap } from \"../types/table\";\r\n\r\nfunction calcImgPosAndSize(\r\n  range: ImageRange,\r\n  positionMap: RowsAndColsSpanMap\r\n): ImagePosAndSize {\r\n  const { rows, cols } = positionMap;\r\n  const { tl, br } = range;\r\n  const offsetLeft = (tl.col - tl.nativeCol) * cols[Math.ceil(tl.col)];\r\n  const offsetTop = (tl.row - tl.nativeRow) * rows[Math.ceil(tl.row)];\r\n  let baseLeft = 0;\r\n  for (let k = tl.nativeCol; k >= 0; k--) {\r\n    baseLeft += cols[k];\r\n  }\r\n  let baseTop = 0;\r\n  for (let k = tl.nativeRow; k >= 0; k--) {\r\n    baseTop += rows[k];\r\n  }\r\n  const left = baseLeft + offsetLeft;\r\n  const top = baseTop + offsetTop;\r\n\r\n  const offsetRight = (br.col - br.nativeCol) * cols[Math.ceil(br.col)];\r\n  const offsetBottom = (br.col - br.nativeCol) * rows[Math.ceil(br.row)];\r\n  let baseRight = 0;\r\n  for (let k = br.nativeCol; k >= 0; k--) {\r\n    baseRight += cols[k];\r\n  }\r\n  let baseBottom = 0;\r\n  for (let k = br.nativeRow; k >= 0; k--) {\r\n    baseBottom += rows[k];\r\n  }\r\n  const width = baseRight + offsetRight - left;\r\n  const height = baseBottom + offsetBottom - top;\r\n  return {\r\n    left,\r\n    top,\r\n    width,\r\n    height,\r\n  };\r\n}\r\n\r\nfunction regulateImgPosAndSize(\r\n  res: ImagePosAndSize,\r\n  range: ImageRange,\r\n  positionMap: RowsAndColsSpanMap\r\n): ImagePosAndSize {\r\n  if (res.width) return res;\r\n  const { cols } = positionMap;\r\n  const { tl, br } = range;\r\n  const width = (br.nativeColOff - tl.nativeColOff) / 10000;\r\n  const leftOffset = tl.nativeColOff / 10000;\r\n\r\n  let baseLeft = 0;\r\n  for (let k = tl.nativeCol; k >= 0; k--) {\r\n    baseLeft += cols[k];\r\n  }\r\n  const left = baseLeft + leftOffset;\r\n  return {\r\n    ...res,\r\n    left,\r\n    width,\r\n  };\r\n}\r\n\r\nexport async function genImageHtml(\r\n  workSheet: Worksheet,\r\n  positionMap: RowsAndColsSpanMap\r\n): Promise<string> {\r\n  const images = workSheet.getImages();\r\n  let imageHtml = \"\";\r\n  for (const img of images) {\r\n    let pos = calcImgPosAndSize(img.range, positionMap);\r\n    const { left, top, width, height } = regulateImgPosAndSize(\r\n      pos,\r\n      img.range,\r\n      positionMap\r\n    );\r\n    const styles = `position: absolute; left: ${left}px; top: ${top}px; width: ${width}px; height: ${height}px;`;\r\n    const imgData = workSheet.workbook.getImage(img.imageId as any as number);\r\n    const type = `image/${imgData.extension}`;\r\n    if (imgData.base64) {\r\n      imageHtml += `<img src=\"${imgData.base64}\" style=\"${styles}\" />`;\r\n    } else if (imgData.buffer) {\r\n      const url = URL.createObjectURL(new Blob([imgData.buffer], { type }));\r\n      imageHtml += `<object type=\"${type}\" data=\"${url}\" style=\"${styles}\"></object>`;\r\n    }\r\n  }\r\n  return imageHtml;\r\n}\r\n","import { Alignment, Fill, Font } from \"exceljs\";\r\nimport { parseARGB } from \"../utils\";\r\n\r\nexport function genAlignment(alignment: Partial<Alignment>): string {\r\n  let styles = \"\";\r\n  const { horizontal, vertical, indent, readingOrder } = alignment;\r\n  if (horizontal) styles += `text-align: ${horizontal};`;\r\n  if (vertical) styles += `vertical-align: ${vertical};`;\r\n  if (indent) styles += `text-indent: ${indent};`;\r\n  if (readingOrder) styles += `direction: ${readingOrder};`;\r\n  return styles;\r\n}\r\n\r\nexport function genFont(font: Partial<Font>): string {\r\n  let styles = \"\";\r\n  const { bold, italic, family, name, size, underline, color } = font;\r\n  if (bold) styles += \"font-weight: bold;\";\r\n  if (italic) styles += \"font-style: italic;\";\r\n  if (family) styles += `font-family: ${name};`;\r\n  if (size) styles += `font-size: ${size}px;`;\r\n  if (underline) styles += \"text-decoration: underline;\";\r\n  if (color && color.argb) styles += `color: ${genColor(color.argb)};`;\r\n  return styles;\r\n}\r\n\r\nexport function genFill(fill: Fill): string {\r\n  const { type } = fill;\r\n  if (type === \"pattern\") {\r\n    const { fgColor, bgColor } = fill;\r\n    if (fgColor && fgColor.argb) {\r\n      const color = genColor(fgColor.argb);\r\n      return `background-color: ${color};`;\r\n    } else if (bgColor && bgColor.argb) {\r\n      const color = genColor(bgColor.argb);\r\n      return `background-color: ${color};`;\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\nexport function genColor(argb: string) {\r\n  const { a, r, g, b } = parseARGB(argb);\r\n  return `rgba(${r},${g},${b},${a / 255})`;\r\n}\r\n","import {\n  Cell,\n  CellHyperlinkValue,\n  CellRichTextValue,\n  ValueType,\n} from \"exceljs\";\nimport { genAlignment, genFill, genFont } from \"../CSSStyles/inline\";\nimport { CellSpan } from \"../types/table\";\nimport { genDate, genHyperLink, genRichText } from \"./genText\";\n\nfunction genCellTextByType(cell: Cell): string {\n  const { type, value } = cell;\n  switch (type) {\n    case ValueType.Hyperlink:\n      return genHyperLink(value as CellHyperlinkValue);\n    case ValueType.RichText:\n      return genRichText(value as CellRichTextValue);\n    case ValueType.Date:\n      return genDate(value as Date);\n    default:\n      return (value as string) || \"\";\n  }\n}\n\nfunction computedCellSpan(cell: Cell) {\n  if (!cell.isMerged || cell.master !== cell) return null;\n  const { row, col } = cell.fullAddress;\n  // find the next merged cell\n  let nextRow = row + 1;\n  let nextCell: Cell | undefined;\n  do {\n    nextCell = cell.worksheet.findCell(nextRow++, col);\n  } while (nextCell && nextCell.master === cell);\n  let nextCol = col + 1;\n  nextCell = undefined;\n  do {\n    nextCell = cell.worksheet.findCell(row, nextCol++);\n  } while (nextCell && nextCell.master === cell);\n  const cellSpan: CellSpan = {};\n  if (nextRow - row > 1) {\n    cellSpan.row = nextRow - row - 1;\n  }\n  if (nextCol - col > 1) {\n    cellSpan.col = nextCol - col - 1;\n  }\n  return cellSpan;\n}\n\nexport function genCell(cell: Cell) {\n  let colRowData: CellSpan | null = null;\n  if (cell.isMerged) {\n    // If cell is merged and it isn't the master.\n    if (cell.master !== cell) return \"\";\n    colRowData = computedCellSpan(cell);\n  }\n  let text = genCellTextByType(cell);\n  let cellAttrs = \"\";\n  if (colRowData) {\n    if (colRowData.col) cellAttrs += ` colspan=\"${colRowData.col}\"`;\n    if (colRowData.row) cellAttrs += ` rowspan=\"${colRowData.row}\"`;\n  }\n  let curCellStyle = \"\";\n  if (cell.font) curCellStyle += genFont(cell.font);\n  if (cell.alignment) curCellStyle += genAlignment(cell.alignment);\n  if (cell.fill) curCellStyle += genFill(cell.fill);\n  if (curCellStyle) cellAttrs += ` style=\"${curCellStyle}\"`;\n  return `<td${cellAttrs}>${text}</td>`;\n}\n","import { CellHyperlinkValue, CellRichTextValue } from \"exceljs\";\nimport { genFont } from \"../CSSStyles/inline\";\n\nexport function genHyperLink(value: CellHyperlinkValue) {\n  return `<a href=\"${value.hyperlink}\" target=\"_blank\">${value.text}</a>`;\n}\n\nexport function genRichText(value: CellRichTextValue) {\n  const richText = (value as CellRichTextValue).richText;\n  let text = \"\";\n  for (const rich of richText) {\n    let styles = \"\";\n    if (rich.font) {\n      styles = genFont(rich.font);\n    }\n    if (styles) {\n      text += `<span style=\"${styles}\">${rich.text}</span>`;\n    } else {\n      text += `<span>${rich.text}</span>`;\n    }\n  }\n  return text;\n}\n\nexport function genDate(value: Date) {\n  return value.toString();\n}\n","import { Row, Worksheet } from \"exceljs\";\nimport {\n  CELL_HEIGHT,\n  CELL_WIDTH,\n  FIRST_ORDER_COL_WIDTH,\n  FIRST_ORDER_ROW_HEIGHT,\n  MINIMUM_NUMBER_COLS,\n  MINIMUM_NUMBER_ROWS,\n  TABLE_CLS,\n  TBODY_CLS,\n} from \"../constants/base\";\nimport { genBaseCSS } from \"../CSSStyles/base\";\nimport { genImageHtml } from \"../images/genImages\";\nimport { RowsAndColsSpanMap } from \"../types/table\";\nimport { genCell } from \"./genCell\";\nimport { genEmptyRow, wrapTable } from \"./genHtmlStructure\";\n\nfunction genRows(\n  rows: RowsMap,\n  maxRow: number,\n  maxCol: number,\n  workSheet: Worksheet\n) {\n  let resultRows = \"\";\n  const rowsSpan: number[] = [];\n  for (let index = 1; index <= maxRow; index++) {\n    let result = \"\";\n    const orderCell = `<td class=\"order order-row\">${index}</td>`;\n    let rowHeight: number;\n    // add default.\n    if (!rows[index]) {\n      rowHeight = CELL_HEIGHT;\n      result += genEmptyRow(maxCol, orderCell);\n    } else {\n      // generate cells.\n      const { height } = rows[index];\n      let cellsResult = \"\";\n      for (let j = 1; j <= maxCol; j++) {\n        const curCell = workSheet.findCell(index, j);\n        if (!curCell) {\n          cellsResult += \"<td></td>\";\n        } else {\n          cellsResult += genCell(curCell);\n        }\n      }\n      let rowAttrs = \"\";\n      if (height) {\n        rowAttrs += ` style=\"height:${height}px;\"`;\n        rowHeight = height;\n      } else {\n        rowHeight = CELL_HEIGHT;\n      }\n      result += `<tr${rowAttrs}>${orderCell}${cellsResult}</tr>`;\n    }\n\n    resultRows += result;\n    rowsSpan[index] = rowHeight;\n  }\n  return { resultRows, rowsSpan };\n}\n\nfunction genOrderCols(maxCol: number, workSheet: Worksheet) {\n  const curDefaultColWidth = workSheet.properties.defaultColWidth || 9;\n  let sheetWidth = 0;\n  let orderCol = '<td class=\"order order-row\"></td>';\n  let colStyles = \"\";\n  const colsSpan: number[] = [];\n  for (let j = 1; j <= maxCol; j++) {\n    const column = workSheet.getColumn(j);\n    orderCol += `<td class=\"order order-col index-${j}\">${column.letter}</td>`;\n    if (!column.width) {\n      sheetWidth += CELL_WIDTH;\n      colsSpan[j] = CELL_WIDTH;\n    } else {\n      const curCellWidth = (column.width * CELL_WIDTH) / curDefaultColWidth;\n      colsSpan[j] = curCellWidth;\n      sheetWidth += curCellWidth;\n      colStyles += `.${TBODY_CLS} td.index-${j} { width: ${curCellWidth}px; }`;\n    }\n  }\n  return {\n    sheetWidth,\n    orderCol,\n    colStyles,\n    colsSpan,\n  };\n}\n\ninterface RowsMap {\n  [key: string]: Row;\n}\nexport default async function genSheet(workSheet: Worksheet) {\n  const positionMap: RowsAndColsSpanMap = {\n    rows: [],\n    cols: [],\n  };\n  // generate rows.\n  const rows: RowsMap = {};\n  workSheet.eachRow((row, rowNumber) => {\n    rows[rowNumber] = row;\n  });\n  const lastRow = (workSheet.lastRow && workSheet.lastRow.number) || 0;\n  const maxRow = Math.max(lastRow, MINIMUM_NUMBER_ROWS);\n  const lastColumn = (workSheet.lastColumn && workSheet.lastColumn.number) || 0;\n  const maxCol = Math.max(lastColumn, MINIMUM_NUMBER_COLS);\n\n  const { resultRows, rowsSpan } = genRows(rows, maxRow, maxCol, workSheet);\n  positionMap.rows = [FIRST_ORDER_ROW_HEIGHT, ...rowsSpan];\n  const { sheetWidth, orderCol, colStyles, colsSpan } = genOrderCols(\n    maxCol,\n    workSheet\n  );\n  positionMap.cols = [FIRST_ORDER_COL_WIDTH, ...colsSpan];\n\n  let result = wrapTable(orderCol + resultRows);\n  const tableStyle = `.${TABLE_CLS} { width: ${sheetWidth}px; }`;\n  const imgHtml = await genImageHtml(workSheet, positionMap);\n  result += imgHtml;\n  result += `<style>${tableStyle}${colStyles}</style>`;\n  result += genBaseCSS();\n  return result;\n}\n","import {\r\n  SHEET_BTN_CLS,\r\n  TOGGLE_SHEET_BTN_X,\r\n  TABLE_BORDER_COLOR,\r\n  CELL_HEIGHT,\r\n  CELL_WIDTH,\r\n  SHEET_CLS,\r\n  TABLE_CLS,\r\n  TBODY_CLS,\r\n  UUID,\r\n  EXCEL_SHEETS_CLS,\r\n  ORDER_CELL_BACKGROUND,\r\n} from \"../constants/base\";\r\n\r\nexport function genBaseCSS(): string {\r\n  const base = `\r\n    <style>\r\n      .embed-body-${UUID} { margin: 0; padding: 0; }\r\n      .${TABLE_CLS} { border-collapse: collapse; table-layout: fixed; }\r\n      .${TBODY_CLS} { border-right: 1px solid ${TABLE_BORDER_COLOR}; border-bottom: 1px solid ${TABLE_BORDER_COLOR}; }\r\n      .${TBODY_CLS} td { border-left: 1px solid ${TABLE_BORDER_COLOR}; border-top: 1px solid ${TABLE_BORDER_COLOR}; width: ${CELL_WIDTH}px; height: ${CELL_HEIGHT}px; }\r\n      .${TBODY_CLS} td.order { color: #333; text-align: center; background: ${ORDER_CELL_BACKGROUND}; }\r\n      .${TBODY_CLS} td.order-row { width: 32px; }\r\n    </style>`;\r\n  return base;\r\n}\r\n\r\nexport function genToggleSheetCSS(): string {\r\n  return `\r\n    <style>\r\n      .${EXCEL_SHEETS_CLS} { position: relative; padding-bottom: 26px; }\r\n      .${SHEET_CLS} { display: none; width: 100%; height: 100%; }\r\n      .${SHEET_CLS}.active { display: block; }\r\n      .${TOGGLE_SHEET_BTN_X} { position: fixed; left: 0px; bottom: 0px; display: flex; }\r\n      .${SHEET_BTN_CLS} { height: 30px; padding: 0 15px; border: none; box-shadow: 1px 0 2px #ccc; }\r\n      .${SHEET_BTN_CLS}.active { border-bottom: 2px solid; background: #fff; }\r\n    </style>`;\r\n}\r\n","import { Workbook } from \"exceljs\";\r\nimport { setMinimumNumberCols, setMinimumNumberRows } from \"./constants/base\";\r\nimport { sheetsInAll } from \"./htmls/genHtmlStructure\";\r\nimport genSheet from \"./htmls/genSheet\";\r\nimport { XlsxData, XlsxOptions } from \"./types\";\r\n\r\nexport async function xlsx2Html(data: XlsxData, options?: XlsxOptions) {\r\n  if (options?.minimumRows) {\r\n    setMinimumNumberRows(options.minimumRows);\r\n  }\r\n  if (options?.minimumCols) {\r\n    setMinimumNumberCols(options.minimumCols);\r\n  }\r\n  let buffer: ArrayBuffer;\r\n  if (data instanceof Blob) {\r\n    buffer = await data.arrayBuffer();\r\n  } else if (data instanceof ArrayBuffer) {\r\n    buffer = data;\r\n  } else {\r\n    throw \"xlsx2Html(data, options): The parameter data can only be passed ArrayBuffer, Blob or File type\";\r\n  }\r\n  const workbook = new Workbook();\r\n  await workbook.xlsx.load(buffer);\r\n  const sheetsLen = workbook.worksheets.length;\r\n  const sheets: string[] = [];\r\n  for (let idx = 0; idx < sheetsLen; idx++) {\r\n    const result = await genSheet(workbook.worksheets[idx]);\r\n    sheets.push(result);\r\n  }\r\n  // Separate sheets.\r\n  if (options?.separateSheets === true) {\r\n    if (options.output === \"arrayBuffer\") {\r\n      const all = sheets.map((sheet) => toBuffer(sheet));\r\n      return all;\r\n    }\r\n    return sheets;\r\n  }\r\n  const result = sheetsInAll(sheets, workbook.worksheets);\r\n  // Output ArrayBuffer\r\n  if (options?.output === \"arrayBuffer\") {\r\n    return toBuffer(result);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction toBuffer(data: string) {\r\n  const blob = new Blob([data], { type: \"text/html\" });\r\n  return blob.arrayBuffer();\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","toAndJoinHex","range","result","v","to16","toString","length","UUID","view","crypto","getRandomValues","Uint8Array","front","slice","end","uuid","EXCEL_SHEETS_CLS","TABLE_CLS","TBODY_CLS","SHEET_CLS","SHEET_BTN_CLS","TOGGLE_SHEET_BTN_X","MINIMUM_NUMBER_ROWS","MINIMUM_NUMBER_COLS","EMPTY_ROW_CACHE","genEmptyRow","columns","orderCell","cells","i","calcImgPosAndSize","positionMap","rows","cols","tl","br","offsetLeft","col","nativeCol","Math","ceil","offsetTop","row","nativeRow","baseLeft","k","baseTop","left","top","offsetRight","offsetBottom","baseRight","baseBottom","width","height","regulateImgPosAndSize","res","nativeColOff","leftOffset","genFont","font","styles","bold","italic","family","name","size","underline","color","argb","genColor","a","r","g","b","push","substr","map","parseInt","parseARGB","genCell","cell","colRowData","isMerged","master","fullAddress","nextCell","nextRow","worksheet","findCell","nextCol","undefined","cellSpan","computedCellSpan","text","type","ValueType","hyperlink","genHyperLink","richText","rich","genRichText","genDate","genCellTextByType","cellAttrs","curCellStyle","alignment","horizontal","vertical","indent","readingOrder","genAlignment","fill","fgColor","bgColor","genFill","genSheet","workSheet","eachRow","rowNumber","lastRow","number","maxRow","max","lastColumn","maxCol","resultRows","rowsSpan","index","rowHeight","cellsResult","j","curCell","rowAttrs","genRows","sheetWidth","orderCol","colStyles","colsSpan","curDefaultColWidth","properties","defaultColWidth","column","getColumn","letter","curCellWidth","genOrderCols","tableStyle","imgHtml","images","getImages","imageHtml","img","pos","imgData","workbook","getImage","imageId","extension","base64","buffer","URL","createObjectURL","Blob","genImageHtml","xlsx2Html","data","options","count","minimumRows","console","warn","minimumCols","setMinimumNumberCols","arrayBuffer","ArrayBuffer","Workbook","xlsx","load","sheetsLen","worksheets","sheets","idx","separateSheets","output","sheet","toBuffer","html","buttons","MIME_TYPE","url","active","sheetsInAll"],"sourceRoot":""}